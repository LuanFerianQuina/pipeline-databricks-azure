{
	"name": "Transformacao-de-dados",
	"properties": {
		"description": "Construir um fluxo de dados para geração de um arquivo de clientes, através de um arquivo em CSV de Vendas, já anexado no armazenamento.",
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "Dataset_vendas_modificado",
						"type": "DatasetReference"
					},
					"name": "Vendas"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "Dataset_vendas_modificado",
						"type": "DatasetReference"
					},
					"name": "Clientes",
					"description": "Gerando um arquivo final de clientes"
				}
			],
			"transformations": [
				{
					"name": "select1tabelaclientes",
					"description": "Fizemos um select na tabela venda_Trazendo somente 2 dados \n da tabela venda para clientes_Renomeando Vendas para select1 com as colunas 'IDcliente, Nomecliente'"
				},
				{
					"name": "Addnovacolunacomnomemaiusculo",
					"description": "Adicionamos uma nova coluna na tabela, através de um expressão, para trazer o nome cliente em Maiusculos."
				},
				{
					"name": "Convertendostringparainteger",
					"description": "Converter colunas/dados em tipos diferentes, para string, para inteiro, real...entre outros."
				}
			],
			"scriptLines": [
				"source(output(",
				"          id_venda as string,",
				"          cod_cliente as string,",
				"          nom_cliente as string,",
				"          cod_vendedor as string,",
				"          nom_vendedor as string,",
				"          cod_cidade as string,",
				"          nom_cidade as string,",
				"          cod_produto as string,",
				"          Nom_produto as string,",
				"          cod_marca as string,",
				"          Nom_marca as string,",
				"          cod_departamento as string,",
				"          nom_departamento as string,",
				"          cod_gerencia as string,",
				"          nom_gerencia as string,",
				"          Ano_venda as string,",
				"          {M�s_venda} as string,",
				"          Dia_venda as string,",
				"          dtc_venda as string,",
				"          qtd_venda as string,",
				"          val_venda as string,",
				"          num_nota as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> Vendas",
				"Vendas select(mapColumn(",
				"          IDcliente = cod_cliente,",
				"          Nomecliente = nom_cliente",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select1tabelaclientes",
				"select1tabelaclientes derive(nomeclientes_Maius = upper(Nomecliente)) ~> Addnovacolunacomnomemaiusculo",
				"Addnovacolunacomnomemaiusculo cast(output(",
				"          IDcliente as integer",
				"     ),",
				"     errors: true) ~> Convertendostringparainteger",
				"Convertendostringparainteger sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     input(",
				"          id_venda as string,",
				"          cod_cliente as string,",
				"          nom_cliente as string,",
				"          cod_vendedor as string,",
				"          nom_vendedor as string,",
				"          cod_cidade as string,",
				"          nom_cidade as string,",
				"          cod_produto as string,",
				"          Nom_produto as string,",
				"          cod_marca as string,",
				"          Nom_marca as string,",
				"          cod_departamento as string,",
				"          nom_departamento as string,",
				"          cod_gerencia as string,",
				"          nom_gerencia as string,",
				"          Ano_venda as string,",
				"          {M�s_venda} as string,",
				"          Dia_venda as string,",
				"          dtc_venda as string,",
				"          qtd_venda as string,",
				"          val_venda as string,",
				"          num_nota as string,",
				"          Latitude as string,",
				"          Longitude as string",
				"     ),",
				"     partitionFileNames:['/clientes.csv'],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> Clientes"
			]
		}
	}
}