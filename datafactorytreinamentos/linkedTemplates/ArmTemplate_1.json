{
	"$schema": "http://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#",
	"contentVersion": "1.0.0.0",
	"parameters": {
		"factoryName": {
			"type": "string",
			"metadata": "Nome do Data Factory",
			"defaultValue": "datafactorytreinamentos"
		}
	},
	"variables": {
		"factoryId": "[concat('Microsoft.DataFactory/factories/', parameters('factoryName'))]"
	},
	"resources": [
		{
			"name": "[concat(parameters('factoryName'), '/val_vendas2')]",
			"type": "Microsoft.DataFactory/factories/datasets",
			"apiVersion": "2018-06-01",
			"properties": {
				"linkedServiceName": {
					"referenceName": "AzureBlobStorage1",
					"type": "LinkedServiceReference"
				},
				"annotations": [],
				"type": "DelimitedText",
				"typeProperties": {
					"location": {
						"type": "AzureBlobStorageLocation",
						"fileName": "vendas.csv",
						"container": "fontes"
					},
					"columnDelimiter": ",",
					"escapeChar": "\\",
					"firstRowAsHeader": true,
					"quoteChar": "\""
				},
				"schema": [
					{
						"name": "id_venda",
						"type": "String"
					},
					{
						"name": "cod_cliente",
						"type": "String"
					},
					{
						"name": "nom_cliente",
						"type": "String"
					},
					{
						"name": "cod_vendedor",
						"type": "String"
					},
					{
						"name": "nom_vendedor",
						"type": "String"
					},
					{
						"name": "cod_cidade",
						"type": "String"
					},
					{
						"name": "nom_cidade",
						"type": "String"
					},
					{
						"name": "cod_produto",
						"type": "String"
					},
					{
						"name": "Nom_produto",
						"type": "String"
					},
					{
						"name": "cod_marca",
						"type": "String"
					},
					{
						"name": "Nom_marca",
						"type": "String"
					},
					{
						"name": "cod_departamento",
						"type": "String"
					},
					{
						"name": "nom_departamento",
						"type": "String"
					},
					{
						"name": "cod_gerencia",
						"type": "String"
					},
					{
						"name": "nom_gerencia",
						"type": "String"
					},
					{
						"name": "Ano_venda",
						"type": "String"
					},
					{
						"name": "M�s_venda",
						"type": "String"
					},
					{
						"name": "Dia_venda",
						"type": "String"
					},
					{
						"name": "dtc_venda",
						"type": "String"
					},
					{
						"name": "qtd_venda",
						"type": "String"
					},
					{
						"name": "val_venda",
						"type": "String"
					},
					{
						"name": "num_nota",
						"type": "String"
					},
					{
						"name": "Latitude",
						"type": "String"
					},
					{
						"name": "Longitude",
						"type": "String"
					}
				]
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipelineExemploCopyData')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"activities": [
					{
						"name": "Copiar dados nota fiscal",
						"type": "Copy",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id_venda",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "id_venda",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "nom_cliente",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "nom_cliente",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "nom_vendedor",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "nom_vendedor",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "nom_cidade",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "nom_cidade",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Nom_produto",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Nom_produto",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "Nom_marca",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "Nom_marca",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "nom_departamento",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "nom_departamento",
											"type": "String",
											"physicalType": "String"
										}
									},
									{
										"source": {
											"name": "nom_gerencia",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "nom_gerencia",
											"type": "String",
											"physicalType": "String"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Dataset_vendas",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Dataset_vendas_modificado",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					},
					{
						"name": "Copy data2",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Copiar dados nota fiscal",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "DelimitedTextSink",
								"storeSettings": {
									"type": "AzureBlobStorageWriteSettings"
								},
								"formatSettings": {
									"type": "DelimitedTextWriteSettings",
									"quoteAllText": true,
									"fileExtension": ".txt"
								}
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Dataset_vendas",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Dataset_vendas_modificado",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-26T20:36:59Z"
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/pipeline_gatilho_alura')]",
			"type": "Microsoft.DataFactory/factories/triggers",
			"apiVersion": "2018-06-01",
			"properties": {
				"annotations": [],
				"runtimeState": "Started",
				"pipelines": [
					{
						"pipelineReference": {
							"referenceName": "datalake-ingestao",
							"type": "PipelineReference"
						},
						"parameters": {}
					}
				],
				"type": "ScheduleTrigger",
				"typeProperties": {
					"recurrence": {
						"frequency": "Hour",
						"interval": 1,
						"startTime": "2023-11-09T14:08:00",
						"timeZone": "E. South America Standard Time"
					}
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/ArquivoVendaAnoMax')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Aqui vamos gerar um fluxo que traga o valor de vendas por ano, mês e qual foi a maior venda.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dataset_vendas_modificado",
								"type": "DatasetReference"
							},
							"name": "DatasetVendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "ArquivoVendaAnoMax",
								"type": "DatasetReference"
							},
							"name": "ArquivoVendaAnoMax",
							"description": "Gerando o arquivo final. "
						}
					],
					"transformations": [
						{
							"name": "SelectInformacoesDataset",
							"description": "Selecionamos as colunas do dataset de vendas que precisamos para gerar um dataframe final de vendas"
						},
						{
							"name": "AgregarColunas",
							"description": "Somar por Ano e Mês"
						},
						{
							"name": "RankVendasMesAno",
							"description": "Mostrar o rank por vendas"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id_venda as string,",
						"          cod_cliente as string,",
						"          nom_cliente as string,",
						"          cod_vendedor as string,",
						"          nom_vendedor as string,",
						"          cod_cidade as string,",
						"          nom_cidade as string,",
						"          cod_produto as string,",
						"          Nom_produto as string,",
						"          cod_marca as string,",
						"          Nom_marca as string,",
						"          cod_departamento as string,",
						"          nom_departamento as string,",
						"          cod_gerencia as string,",
						"          nom_gerencia as string,",
						"          Ano_venda as string,",
						"          {M�s_venda} as string,",
						"          Dia_venda as string,",
						"          dtc_venda as string,",
						"          qtd_venda as string,",
						"          val_venda as string,",
						"          num_nota as string,",
						"          Latitude as string,",
						"          Longitude as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DatasetVendas",
						"DatasetVendas select(mapColumn(",
						"          id_venda,",
						"          Ano_venda,",
						"          {M�s_venda},",
						"          Dia_venda,",
						"          dtc_venda,",
						"          qtd_venda,",
						"          val_venda",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelectInformacoesDataset",
						"SelectInformacoesDataset aggregate(groupBy(Ano_venda,",
						"          {M�s_venda}),",
						"     Valor_mes_ano = sum(toDouble(val_venda))) ~> AgregarColunas",
						"AgregarColunas rank(desc(Valor_mes_ano, true),",
						"     output(RanKTopVendas as long)) ~> RankVendasMesAno",
						"RankVendasMesAno sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ArquivoVendaAnoMax.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ArquivoVendaAnoMax"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Carga_dataset_cidade')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Criar um pipeline para subir o dataset no bando de dados de cidade",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VendasSemClientes",
								"type": "DatasetReference"
							},
							"name": "DatasetVendasSemClientes"
						},
						{
							"dataset": {
								"referenceName": "VendasCliente",
								"type": "DatasetReference"
							},
							"name": "DatasetVendasClientes"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dir_blob",
								"type": "DatasetReference"
							},
							"name": "GerandoArquivoFinal",
							"description": "Gerando o arquivo final para incluir no bando de dados."
						}
					],
					"transformations": [
						{
							"name": "select1",
							"description": "Selecionar as colunas"
						},
						{
							"name": "JoinEntreasbases",
							"description": "Adicionar o segundo fluxo à junção por meio das configurações dos datasets"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id_venda as string,",
						"          cod_vendedor as string,",
						"          nom_vendedor as string,",
						"          cod_produto as string,",
						"          Nom_produto as string,",
						"          cod_marca as string,",
						"          Nom_marca as string,",
						"          cod_departamento as string,",
						"          nom_departamento as string,",
						"          cod_gerencia as string,",
						"          nom_gerencia as string,",
						"          Ano_venda as string,",
						"          {M�s_venda} as string,",
						"          Dia_venda as string,",
						"          dtc_venda as string,",
						"          qtd_venda as string,",
						"          val_venda as string,",
						"          num_nota as string,",
						"          Latitude as string,",
						"          Longitude as string,",
						"          nom_cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DatasetVendasSemClientes",
						"source(output(",
						"          id_venda as string,",
						"          cod_cliente as string,",
						"          cod_cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DatasetVendasClientes",
						"DatasetVendasSemClientes select(mapColumn(",
						"          id_venda,",
						"          Ano_venda,",
						"          {M�s_venda},",
						"          val_venda,",
						"          nom_cidade",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1, DatasetVendasClientes join(select1@id_venda == cod_cidade,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinEntreasbases",
						"JoinEntreasbases sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['CargaCidade.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> GerandoArquivoFinal"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Carga_tabelaCliente')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga da tabela cliente no banco de dados, trazendo informações da base de vendas. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dataset_vendas_modificado",
								"type": "DatasetReference"
							},
							"name": "DatasetVendas",
							"description": "Importar os dados da base de vendas em Excel para a tabela de vendas. "
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dir_blob",
								"type": "DatasetReference"
							},
							"name": "SaidaCargaCliente"
						}
					],
					"transformations": [
						{
							"name": "select1"
						},
						{
							"name": "TransformarNomedoCliente"
						},
						{
							"name": "distinct",
							"description": "ELIMINAR registros duplicados dependendo de TODOS os campos listados no respectivo SELECT -  Na função first serviu para trazer apenas um ID do cliente sem ser repetido."
						}
					],
					"scriptLines": [
						"source(output(",
						"          id_venda as string,",
						"          cod_cliente as string,",
						"          nom_cliente as string,",
						"          cod_vendedor as string,",
						"          nom_vendedor as string,",
						"          cod_cidade as string,",
						"          nom_cidade as string,",
						"          cod_produto as string,",
						"          Nom_produto as string,",
						"          cod_marca as string,",
						"          Nom_marca as string,",
						"          cod_departamento as string,",
						"          nom_departamento as string,",
						"          cod_gerencia as string,",
						"          nom_gerencia as string,",
						"          Ano_venda as string,",
						"          {M�s_venda} as string,",
						"          Dia_venda as string,",
						"          dtc_venda as string,",
						"          qtd_venda as string,",
						"          val_venda as string,",
						"          num_nota as string,",
						"          Latitude as string,",
						"          Longitude as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DatasetVendas",
						"DatasetVendas select(mapColumn(",
						"          idcliente = cod_cliente,",
						"          nomecliente = nom_cliente",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 derive(nomecliente = upper(nomecliente)) ~> TransformarNomedoCliente",
						"TransformarNomedoCliente aggregate(groupBy(idcliente,",
						"          nomecliente),",
						"     Idclienteadd = first(idcliente)) ~> distinct",
						"distinct sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['CargaSaidaCliente.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          idcliente,",
						"          nomecliente",
						"     ),",
						"     partitionBy('hash', 1)) ~> SaidaCargaCliente"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Carga_tabelaProduto')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga_tabelaProduto",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dataset_vendas_modificado",
								"type": "DatasetReference"
							},
							"name": "DatasetVendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dir_blob",
								"type": "DatasetReference"
							},
							"name": "SaidaCargaProduto"
						}
					],
					"transformations": [
						{
							"name": "select1",
							"description": "Selecionando somente as tabelas que iremos inserir no banco de dados. "
						},
						{
							"name": "distinct",
							"description": "Retirando os dados duplicados"
						},
						{
							"name": "select2",
							"description": "Selecionando as colunas para o dataset"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id_venda as string,",
						"          cod_cliente as string,",
						"          nom_cliente as string,",
						"          cod_vendedor as string,",
						"          nom_vendedor as string,",
						"          cod_cidade as string,",
						"          nom_cidade as string,",
						"          cod_produto as string,",
						"          Nom_produto as string,",
						"          cod_marca as string,",
						"          Nom_marca as string,",
						"          cod_departamento as string,",
						"          nom_departamento as string,",
						"          cod_gerencia as string,",
						"          nom_gerencia as string,",
						"          Ano_venda as string,",
						"          {M�s_venda} as string,",
						"          Dia_venda as string,",
						"          dtc_venda as string,",
						"          qtd_venda as string,",
						"          val_venda as string,",
						"          num_nota as string,",
						"          Latitude as string,",
						"          Longitude as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> DatasetVendas",
						"DatasetVendas select(skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 aggregate(groupBy(cod_produto,",
						"          Nom_produto,",
						"          nom_departamento),",
						"     idprodutoadd = first(cod_produto)) ~> distinct",
						"distinct select(mapColumn(",
						"          cod_produto,",
						"          Nom_produto,",
						"          nom_departamento",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select2",
						"select2 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['CargaSaidaProduto.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     mapColumn(",
						"          idproduto = cod_produto,",
						"          nomeproduto = Nom_produto,",
						"          nomecategoria = nom_departamento",
						"     ),",
						"     partitionBy('hash', 1)) ~> SaidaCargaProduto"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Cargas_vendas')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga do dataset de vendas. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "VendasSemClientes",
								"type": "DatasetReference"
							},
							"name": "VendasSemClientes",
							"description": "Carga do dataset de vendas sem clientes"
						},
						{
							"dataset": {
								"referenceName": "VendasCliente",
								"type": "DatasetReference"
							},
							"name": "VendasClientes",
							"description": "Carga do dataset de vendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dir_blob",
								"type": "DatasetReference"
							},
							"name": "GerandoArquivoFinal",
							"description": "Gerando o arquivo que fizemos os joins."
						}
					],
					"transformations": [
						{
							"name": "Select",
							"description": "Selecionar as colunas que precisamos da tabela de vendas sem clientes. "
						},
						{
							"name": "JoinDataset"
						},
						{
							"name": "Renomeandocolunas"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id_venda as string,",
						"          cod_vendedor as string,",
						"          nom_vendedor as string,",
						"          cod_produto as string,",
						"          Nom_produto as string,",
						"          cod_marca as string,",
						"          Nom_marca as string,",
						"          cod_departamento as string,",
						"          nom_departamento as string,",
						"          cod_gerencia as string,",
						"          nom_gerencia as string,",
						"          Ano_venda as string,",
						"          {M�s_venda} as string,",
						"          Dia_venda as string,",
						"          dtc_venda as string,",
						"          qtd_venda as string,",
						"          val_venda as string,",
						"          num_nota as string,",
						"          Latitude as string,",
						"          Longitude as string,",
						"          nom_cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> VendasSemClientes",
						"source(output(",
						"          id_venda as string,",
						"          cod_cliente as string,",
						"          cod_cidade as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> VendasClientes",
						"VendasSemClientes select(mapColumn(",
						"          id_venda,",
						"          cod_produto,",
						"          nom_departamento,",
						"          qtd_venda,",
						"          val_venda",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Select",
						"Select, VendasClientes join(Select@id_venda == VendasClientes@id_venda,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> JoinDataset",
						"JoinDataset select(mapColumn(",
						"          idvenda = Select@id_venda,",
						"          idproduto = cod_produto,",
						"          quantidade = qtd_venda,",
						"          valototal = val_venda,",
						"          idcliente = cod_cliente",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Renomeandocolunas",
						"Renomeandocolunas sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['CargasVendas.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> GerandoArquivoFinal"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Conjunto_de_dados01_ano2014')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Separar o conjunto de dados 01...Criar uma divisão com se fosse um If, se for 2014 senao, se for demais ....Pode separar por mais anos se quiser. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dir_blob",
								"type": "DatasetReference"
							},
							"name": "Conjuntodedados01Ano2014"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dir_blob",
								"type": "DatasetReference"
							},
							"name": "ArquivofinalseparadorAno2014"
						},
						{
							"dataset": {
								"referenceName": "Dir_blob",
								"type": "DatasetReference"
							},
							"name": "ArquivofinalseparadorAno2015"
						}
					],
					"transformations": [
						{
							"name": "Divisaodearquivo"
						},
						{
							"name": "filter1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Ano_venda as short,",
						"          {M�s_venda} as short,",
						"          Valor_mes_ano as double,",
						"          RanKTopVendas as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['/Uniao_de_arquivos.csv']) ~> Conjuntodedados01Ano2014",
						"Conjuntodedados01Ano2014 split(Ano_venda==2014,",
						"     disjoint: false) ~> Divisaodearquivo@(Regra2014, Demais)",
						"Divisaodearquivo@Regra2014 filter(Valor_mes_ano <264703) ~> filter1",
						"filter1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Vendas2014.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ArquivofinalseparadorAno2014",
						"Divisaodearquivo@Demais sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Vendas2015.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ArquivofinalseparadorAno2015"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/GerandoArquivoVendasPorANo')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Extraímos os dados do dataset de vendas e fizermos um fluxo para gerar o valor final de venda por ano. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dataset_vendas",
								"type": "DatasetReference"
							},
							"name": "Origemdodataset",
							"description": "Adicionar conjunto de dados de Origem. Planilha de Vendas."
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Arquivofinal",
								"type": "DatasetReference"
							},
							"name": "Gerandoarquivofinal"
						}
					],
					"transformations": [
						{
							"name": "Selecaodecampos",
							"description": "Aqui faremos a seleção de quais são as colunas e às informações que teremos ter no dataframe."
						},
						{
							"name": "anovenda"
						}
					],
					"scriptLines": [
						"source(output(",
						"          id_venda as string,",
						"          cod_cliente as string,",
						"          nom_cliente as string,",
						"          cod_vendedor as string,",
						"          nom_vendedor as string,",
						"          cod_cidade as string,",
						"          nom_cidade as string,",
						"          cod_produto as string,",
						"          Nom_produto as string,",
						"          cod_marca as string,",
						"          Nom_marca as string,",
						"          cod_departamento as string,",
						"          nom_departamento as string,",
						"          cod_gerencia as string,",
						"          nom_gerencia as string,",
						"          Ano_venda as string,",
						"          {M�s_venda} as string,",
						"          Dia_venda as string,",
						"          dtc_venda as string,",
						"          qtd_venda as string,",
						"          val_venda as string,",
						"          num_nota as string,",
						"          Latitude as string,",
						"          Longitude as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Origemdodataset",
						"Origemdodataset select(mapColumn(",
						"          id_venda,",
						"          Ano_venda,",
						"          {M�s_venda},",
						"          Dia_venda,",
						"          dtc_venda,",
						"          qtd_venda,",
						"          val_venda",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> Selecaodecampos",
						"Selecaodecampos aggregate(groupBy(Ano_venda),",
						"     Val_venda_ano = sum(toDouble(val_venda))) ~> anovenda",
						"anovenda sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ArquivoFinalVendasPorAno.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Gerandoarquivofinal"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JoinClientesVendas')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Joint entre as tabelas de clientes_cargo e vendas. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ClienteCargo",
								"type": "DatasetReference"
							},
							"name": "JoinClientescargo"
						},
						{
							"dataset": {
								"referenceName": "Dataset_vendas_modificado",
								"type": "DatasetReference"
							},
							"name": "BaseVendas",
							"description": "Base vendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dir_blob",
								"type": "DatasetReference"
							},
							"name": "VendasClientesCargo",
							"description": "Gerando um dataframe"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "SelecionarColunasDataframe"
						}
					],
					"scriptLines": [
						"source(output(",
						"          idcliente as string,",
						"          idcargo as string,",
						"          nomecargo as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> JoinClientescargo",
						"source(output(",
						"          id_venda as string,",
						"          cod_cliente as string,",
						"          nom_cliente as string,",
						"          cod_vendedor as string,",
						"          nom_vendedor as string,",
						"          cod_cidade as string,",
						"          nom_cidade as string,",
						"          cod_produto as string,",
						"          Nom_produto as string,",
						"          cod_marca as string,",
						"          Nom_marca as string,",
						"          cod_departamento as string,",
						"          nom_departamento as string,",
						"          cod_gerencia as string,",
						"          nom_gerencia as string,",
						"          Ano_venda as string,",
						"          {M�s_venda} as string,",
						"          Dia_venda as string,",
						"          dtc_venda as string,",
						"          qtd_venda as string,",
						"          val_venda as string,",
						"          num_nota as string,",
						"          Latitude as string,",
						"          Longitude as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> BaseVendas",
						"BaseVendas, JoinClientescargo join(cod_cliente == idcliente,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          nom_cliente,",
						"          Nom_produto,",
						"          Nom_marca,",
						"          {M�s_venda},",
						"          idcliente,",
						"          idcargo,",
						"          nomecargo",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> SelecionarColunasDataframe",
						"SelecionarColunasDataframe sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['ClientesVendasCargo.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> VendasClientesCargo"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/JoinJuncao')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Aqui iremos fazer um Join para trazer dados de outro dataset e depois fazer uma seleção com as colunas que precisamos para o novo dataframe.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Vendas",
								"type": "DatasetReference"
							},
							"name": "ArquivoVendasMod"
						},
						{
							"dataset": {
								"referenceName": "Dataset_vendas",
								"type": "DatasetReference"
							},
							"name": "ArquivoVendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dir_blob",
								"type": "DatasetReference"
							},
							"name": "ArquivoFinalJoin"
						}
					],
					"transformations": [
						{
							"name": "join1"
						},
						{
							"name": "select1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Ano_venda as string,",
						"          {M�s_venda} as string,",
						"          Dia_venda as string,",
						"          dtc_venda as string,",
						"          qtd_venda as string,",
						"          val_venda as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ArquivoVendasMod",
						"source(output(",
						"          id_venda as string,",
						"          cod_cliente as string,",
						"          nom_cliente as string,",
						"          cod_vendedor as string,",
						"          nom_vendedor as string,",
						"          cod_cidade as string,",
						"          nom_cidade as string,",
						"          cod_produto as string,",
						"          Nom_produto as string,",
						"          cod_marca as string,",
						"          Nom_marca as string,",
						"          cod_departamento as string,",
						"          nom_departamento as string,",
						"          cod_gerencia as string,",
						"          nom_gerencia as string,",
						"          Ano_venda as string,",
						"          {M�s_venda} as string,",
						"          Dia_venda as string,",
						"          dtc_venda as string,",
						"          qtd_venda as string,",
						"          val_venda as string,",
						"          num_nota as string,",
						"          Latitude as string,",
						"          Longitude as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> ArquivoVendas",
						"ArquivoVendasMod, ArquivoVendas join(ArquivoVendasMod@Ano_venda == ArquivoVendas@Ano_venda,",
						"     joinType:'inner',",
						"     matchType:'exact',",
						"     ignoreSpaces: false,",
						"     broadcast: 'auto')~> join1",
						"join1 select(mapColumn(",
						"          Ano_venda = ArquivoVendasMod@Ano_venda,",
						"          {M�s_venda} = ArquivoVendasMod@{M�s_venda},",
						"          Dia_venda = ArquivoVendasMod@Dia_venda,",
						"          qtd_venda = ArquivoVendasMod@qtd_venda,",
						"          val_venda = ArquivoVendasMod@val_venda,",
						"          id_venda,",
						"          cod_cliente,",
						"          nom_cliente,",
						"          cod_vendedor,",
						"          nom_vendedor,",
						"          cod_cidade,",
						"          nom_cidade,",
						"          Ano_venda = ArquivoVendas@Ano_venda,",
						"          {M�s_venda} = ArquivoVendas@{M�s_venda},",
						"          qtd_venda = ArquivoVendas@qtd_venda,",
						"          val_venda = ArquivoVendas@val_venda",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1",
						"select1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['JOINarquivovendas.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> ArquivoFinalJoin"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Transformacao-de-dados')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Construir um fluxo de dados para geração de um arquivo de clientes, através de um arquivo em CSV de Vendas, já anexado no armazenamento.",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "Dataset_vendas_modificado",
								"type": "DatasetReference"
							},
							"name": "Vendas"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dataset_vendas_modificado",
								"type": "DatasetReference"
							},
							"name": "Clientes",
							"description": "Gerando um arquivo final de clientes"
						}
					],
					"transformations": [
						{
							"name": "select1tabelaclientes",
							"description": "Fizemos um select na tabela venda_Trazendo somente 2 dados \n da tabela venda para clientes_Renomeando Vendas para select1 com as colunas 'IDcliente, Nomecliente'"
						},
						{
							"name": "Addnovacolunacomnomemaiusculo",
							"description": "Adicionamos uma nova coluna na tabela, através de um expressão, para trazer o nome cliente em Maiusculos."
						},
						{
							"name": "Convertendostringparainteger",
							"description": "Converter colunas/dados em tipos diferentes, para string, para inteiro, real...entre outros."
						}
					],
					"scriptLines": [
						"source(output(",
						"          id_venda as string,",
						"          cod_cliente as string,",
						"          nom_cliente as string,",
						"          cod_vendedor as string,",
						"          nom_vendedor as string,",
						"          cod_cidade as string,",
						"          nom_cidade as string,",
						"          cod_produto as string,",
						"          Nom_produto as string,",
						"          cod_marca as string,",
						"          Nom_marca as string,",
						"          cod_departamento as string,",
						"          nom_departamento as string,",
						"          cod_gerencia as string,",
						"          nom_gerencia as string,",
						"          Ano_venda as string,",
						"          {M�s_venda} as string,",
						"          Dia_venda as string,",
						"          dtc_venda as string,",
						"          qtd_venda as string,",
						"          val_venda as string,",
						"          num_nota as string,",
						"          Latitude as string,",
						"          Longitude as string",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false) ~> Vendas",
						"Vendas select(mapColumn(",
						"          IDcliente = cod_cliente,",
						"          Nomecliente = nom_cliente",
						"     ),",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true) ~> select1tabelaclientes",
						"select1tabelaclientes derive(nomeclientes_Maius = upper(Nomecliente)) ~> Addnovacolunacomnomemaiusculo",
						"Addnovacolunacomnomemaiusculo cast(output(",
						"          IDcliente as integer",
						"     ),",
						"     errors: true) ~> Convertendostringparainteger",
						"Convertendostringparainteger sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     input(",
						"          id_venda as string,",
						"          cod_cliente as string,",
						"          nom_cliente as string,",
						"          cod_vendedor as string,",
						"          nom_vendedor as string,",
						"          cod_cidade as string,",
						"          nom_cidade as string,",
						"          cod_produto as string,",
						"          Nom_produto as string,",
						"          cod_marca as string,",
						"          Nom_marca as string,",
						"          cod_departamento as string,",
						"          nom_departamento as string,",
						"          cod_gerencia as string,",
						"          nom_gerencia as string,",
						"          Ano_venda as string,",
						"          {M�s_venda} as string,",
						"          Dia_venda as string,",
						"          dtc_venda as string,",
						"          qtd_venda as string,",
						"          val_venda as string,",
						"          num_nota as string,",
						"          Latitude as string,",
						"          Longitude as string",
						"     ),",
						"     partitionFileNames:['/clientes.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Clientes"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Uniao_de_arquivos')]",
			"type": "Microsoft.DataFactory/factories/dataflows",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Iremos unir dois arquivos com a mesma quantidade de colunas. ",
				"type": "MappingDataFlow",
				"typeProperties": {
					"sources": [
						{
							"dataset": {
								"referenceName": "ArquivoVendaAnoMax",
								"type": "DatasetReference"
							},
							"name": "Arquivo01"
						},
						{
							"dataset": {
								"referenceName": "ArquivoVendaAnoMax",
								"type": "DatasetReference"
							},
							"name": "Arquivo02"
						}
					],
					"sinks": [
						{
							"dataset": {
								"referenceName": "Dir_blob",
								"type": "DatasetReference"
							},
							"name": "Arquivofinaldeuniao",
							"rejectedDataLinkedService": {
								"referenceName": "AzureBlobStorage1",
								"type": "LinkedServiceReference"
							}
						}
					],
					"transformations": [
						{
							"name": "union1"
						}
					],
					"scriptLines": [
						"source(output(",
						"          Ano_venda as short,",
						"          {M�s_venda} as short,",
						"          Valor_mes_ano as double,",
						"          RanKTopVendas as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['/ArquivoVendaAnoMax.csv']) ~> Arquivo01",
						"source(output(",
						"          Ano_venda as short,",
						"          {M�s_venda} as short,",
						"          Valor_mes_ano as double,",
						"          RanKTopVendas as short",
						"     ),",
						"     allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     ignoreNoFilesFound: false,",
						"     wildcardPaths:['/ArquivoVendaAnoMax.csv']) ~> Arquivo02",
						"Arquivo01, Arquivo02 union(byName: true)~> union1",
						"union1 sink(allowSchemaDrift: true,",
						"     validateSchema: false,",
						"     partitionFileNames:['Uniao_de_arquivos.csv'],",
						"     skipDuplicateMapInputs: true,",
						"     skipDuplicateMapOutputs: true,",
						"     partitionBy('hash', 1)) ~> Arquivofinaldeuniao"
					]
				}
			},
			"dependsOn": []
		},
		{
			"name": "[concat(parameters('factoryName'), '/Carga_Dataset_vendas')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga do dataset de vendas",
				"activities": [
					{
						"name": "Carga_vendas",
						"description": "Carga do dataset de vendas",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Cargas_vendas",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"VendasSemClientes": {},
									"VendasClientes": {},
									"GerandoArquivoFinal": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CarregarNoBancodeDados",
						"description": "Fazer a carga de vendas no banco de dados",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Carga_vendas",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "CargasVendas.csv*",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"idvenda"
									]
								},
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "idvenda",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "idvenda",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "idcliente",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "idcliente",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "idproduto",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "idproduto",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "quantidade",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "quantidade",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "valototal",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "valor_total",
											"type": "Double",
											"physicalType": "float"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Dir_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Tb_vendas",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-31T20:48:17Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Cargas_vendas')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Carga_dataset_cidade')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Criar um pipeline para subir o dataset no bando de dados de cidade",
				"activities": [
					{
						"name": "CargaDatasetCidade",
						"description": "Carga do dataset de cidades",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Carga_dataset_cidade",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DatasetVendasSemClientes": {},
									"DatasetVendasClientes": {},
									"GerandoArquivoFinal": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "TransferenciaBancodeDados",
						"description": "Transferir o arquivo para o bando de dados de cidades",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CargaDatasetCidade",
								"dependencyConditions": [
									"Skipped"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "CargaCidade.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"idcidade"
									]
								},
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "id_venda",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "idcidade",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "Ano_venda",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "nomecidade",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "DelimitedText2",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Tb_cidade",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-31T21:36:32Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Carga_dataset_cidade')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Carga_tabelaCliente')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga da tabela cliente no banco de dados, trazendo informações da base de vendas. ",
				"activities": [
					{
						"name": "Carga_tabelaCliente",
						"description": "Carga_tabelaCliente",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Carga_tabelaCliente",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DatasetVendas": {},
									"SaidaCargaCliente": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CargaClienteBD",
						"description": "Carga das informações para o BD",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "Carga_tabelaCliente",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "CargaSaidaCliente.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"idcliente"
									]
								},
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"mappings": [
									{
										"source": {
											"name": "idcliente",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "idcliente",
											"type": "Int32",
											"physicalType": "int"
										}
									},
									{
										"source": {
											"name": "nomecliente",
											"type": "String",
											"physicalType": "String"
										},
										"sink": {
											"name": "nomecliente",
											"type": "String",
											"physicalType": "varchar"
										}
									}
								],
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Dir_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Tb_Clientes",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-30T19:31:46Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Carga_tabelaCliente')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/Carga_tabelaProduto')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Carga no banco de dados, através do dataset de vendas. ",
				"activities": [
					{
						"name": "CargaTabelaProduto",
						"description": "Carga_tabelaProduto",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Carga_tabelaProduto",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"DatasetVendas": {},
									"SaidaCargaProduto": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					},
					{
						"name": "CopiarDados",
						"description": "Copiar os dados para dentro do banco de dados",
						"type": "Copy",
						"dependsOn": [
							{
								"activity": "CargaTabelaProduto",
								"dependencyConditions": [
									"Succeeded"
								]
							}
						],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"source": {
								"type": "DelimitedTextSource",
								"storeSettings": {
									"type": "AzureBlobStorageReadSettings",
									"recursive": true,
									"wildcardFileName": "CargaSaidaProduto.csv",
									"enablePartitionDiscovery": false
								},
								"formatSettings": {
									"type": "DelimitedTextReadSettings"
								}
							},
							"sink": {
								"type": "SqlServerSink",
								"writeBehavior": "upsert",
								"upsertSettings": {
									"useTempDB": true,
									"keys": [
										"idproduto"
									]
								},
								"sqlWriterUseTableLock": false
							},
							"enableStaging": false,
							"translator": {
								"type": "TabularTranslator",
								"typeConversion": true,
								"typeConversionSettings": {
									"allowDataTruncation": true,
									"treatBooleanAsNumber": false
								}
							}
						},
						"inputs": [
							{
								"referenceName": "Dir_blob",
								"type": "DatasetReference",
								"parameters": {}
							}
						],
						"outputs": [
							{
								"referenceName": "Tb_produto",
								"type": "DatasetReference",
								"parameters": {}
							}
						]
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-30T20:01:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Carga_tabelaProduto')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/DivisaoCondicional')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Possibilita em determinada regra, o fluxo seguir para um caminho ou outro, ou diversos caminhos. ",
				"activities": [
					{
						"name": "Arquivo_divisao",
						"description": "Fluxo para divisão condicional",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "Conjunto_de_dados01_ano2014",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"Conjuntodedados01Ano2014": {},
									"ArquivofinalseparadorAno2014": {},
									"ArquivofinalseparadorAno2015": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-28T01:25:05Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/Conjunto_de_dados01_ano2014')]"
			]
		},
		{
			"name": "[concat(parameters('factoryName'), '/JoinTabelasVendasCargo')]",
			"type": "Microsoft.DataFactory/factories/pipelines",
			"apiVersion": "2018-06-01",
			"properties": {
				"description": "Tabelas vendas e cargo.",
				"activities": [
					{
						"name": "Clientes",
						"description": "Dataset Clientes",
						"type": "ExecuteDataFlow",
						"dependsOn": [],
						"policy": {
							"timeout": "0.12:00:00",
							"retry": 0,
							"retryIntervalInSeconds": 30,
							"secureOutput": false,
							"secureInput": false
						},
						"userProperties": [],
						"typeProperties": {
							"dataflow": {
								"referenceName": "JoinClientesVendas",
								"type": "DataFlowReference",
								"parameters": {},
								"datasetParameters": {
									"JoinClientescargo": {},
									"BaseVendas": {},
									"VendasClientesCargo": {}
								}
							},
							"staging": {},
							"compute": {
								"coreCount": 8,
								"computeType": "General"
							},
							"traceLevel": "Fine"
						}
					}
				],
				"policy": {
					"elapsedTimeMetric": {}
				},
				"annotations": [],
				"lastPublishTime": "2023-10-30T14:17:28Z"
			},
			"dependsOn": [
				"[concat(variables('factoryId'), '/dataflows/JoinClientesVendas')]"
			]
		}
	]
}